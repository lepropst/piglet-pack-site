import CssBaseline from "@mui/material/CssBaseline";
import { ColorModeContext, useTheme } from "../utilities/styling";
import Head from "next/head";
import { ThemeProvider } from "@mui/system";
import { GlobalStyles } from "@mui/material";
import "@fontsource/roboto/300.css";
import "@fontsource/roboto/400.css";
import "@fontsource/roboto/500.css";
import "@fontsource/roboto/700.css";
import type { AppProps } from "next/app";
import dynamic from "next/dynamic";
import { Suspense } from "react";
import Body from "../components/body/body";
import createEmotionCache from "../utilities/createEmotionCache";
import { CacheProvider, EmotionCache } from "@emotion/react";

const clientSideEmotionCache = createEmotionCache();
const DynamicHeader = dynamic(() => import("../components/header/header"), {
  suspense: true,
  ssr: false,
});
const DynamicFooter = dynamic(() => import("../components/footer/footer"), {
  suspense: true,
  ssr: false,
});
function MyApp({
  Component,
  pageProps,
  emotionCache = clientSideEmotionCache,
}: AppProps & { emotionCache?: EmotionCache }) {
  const { colorMode, theme } = useTheme();
  const gStyles = (
    <GlobalStyles
      styles={{
        body: {
          backgroundImage:
            "linear-gradient(to left, rgba(29, 124, 181, .07), rgba(29, 181, 163,.1))",
        },
      }}
    />
  );
  return (
    <CacheProvider value={emotionCache}>
      <ThemeProvider theme={theme}>
        <ColorModeContext.Provider value={colorMode}>
          <CssBaseline>
            <Head>
              <title>Piglet Pack</title>
              <meta name="description" content="Generated by create next app" />
              <link rel="icon" href="/favicon.ico" />
            </Head>
            {gStyles}
            <Suspense fallback={`Loading...`}>
              <DynamicHeader />
            </Suspense>

            <Body>
              <Component {...pageProps} />
            </Body>

            <Suspense fallback={"...loading"}>
              <DynamicFooter />
            </Suspense>
          </CssBaseline>
        </ColorModeContext.Provider>
      </ThemeProvider>
    </CacheProvider>
  );
}

export default MyApp;
